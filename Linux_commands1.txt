username$Machine_name(hostname):~$
. 	==> current directory
.. 	==> parent directory
~	==> home directory  (/home/username)
CD /	==> top directory 
root	==> admin user as administrator in windows
shell builtin command	==> command built in shell
			    doesn't have any executable files



----------------------------------------------------------------
ls
ls -alF
ls --help
cd Documents/
cd ..
cd ~
pwd
type -a ls	==> executable file locations
type -a pwd
pwd  ==  /usr/bin/pwd
man ls
man pwd
man cd			==> No manual entry for cd
type -a cd		==> cd is a shell builtin
man bg
whoami			==> username
hostname		==> machine name or host name
echo "Hello Linux"
history
history -a ./file.txt
ip address	==	ip a
mkdir testdir
cd testdir/
touch file1	==> touch change timestamp of a file
ls -l
touch file1
ls -l
touch file2
rm file1
cd 
rm -r testdir/		==> recursive deletion
ls /etc
cat etc/hosts
cd /
cd /dev
touch file1	==> permission denied
apt install vim ==> permission denied
sudo touch file1
sudo rm file1

-------------------------- 1:30 -----------------------------

cp /etc/hosts .
cat hosts
vi hosts	==> has two modes (command mode, insert mode)
	:q	==> to quite
	k>>up - j>>down - l>>right - h>>left 
	w	>> move one word
	dw 	>> delete a word
	dd	>> delete the line
	yy	>> copy line
	p	>> paste
	i	>> go to insert mode
	o	>> new line
	Esc	>> back to command mode
	:q!	>> quite without saving
	:w	>> save then :q
	:.!ls	>> write command output
	:sh	>> go to shell without exiting vi command
	ps 	>> exit

note >> "The nine major tenets"
ps	==> processes running
which nano
nano
nano tmpfile
ps
ctrl+alt+f3	==> pure text >> ps
echo $SHELL
ps
ls /bin/*sh
sh	==> exit 
ps
exit
touch file1 file2 file3
touch file{4..12}
ls file{5..10}
ls file[5-10]
ls file?
ls file[!2]
ls file[0-9][0-9]

var1=10
echo $var1
var2=test
echo $var2 
echo ${var2}
echo $var3
echo ${var3-novariable}
var3=$[1+3]
echo $var3
var4=$(date)
echo $var4
echo $PATH	==> 
echo $USER
echo $HOSTNAME
echo $SHELL
echo $?		==> show exit code (0>>correctly executed)

echo $var1; ls
echo $var1; echo $?
false; echo $?
true; echo $?

set		==> to show all variables
set | grep var*
set | grep var?
compgen -v
echo var1
bash 		==> open a new bash shell
ps
echo $var1
exit
echo var1
export var1
bash 
ps
echo var1
exit
declare -x

-------------------------- 2:52 -----------------------------

declare --help
var1=4
var2=5
echo $var1 + $var2		==> 4 + 5
echo $(($var1 + $var2))

declare -i num1			==> integer variable
declare -i num2
num1=4
num2=$num1*5
echo $num2

expr --help
expr 1+2		==> 1+2
expr 1 + 2		==> 3
expr 3 / 4
expr 3 * 4		==> Error
expr 3 \* 4
expr 3 \> 4
expr 3 \> 2

type bc
bc
scale = 2
2/3
length = 4
2/3
12.5 * 15.2
quit

### Enviroment variables:
echo $PATH
echo $HOME

ssh ununtu@localhost		==> login shell - non login shell
echo $0				==> to know if the shell is login or not
sudo nano /etc/profile		==> executed when login shell
nano .bashrc

-------------------------- 3:07 -----------------------------

--Data streaming:
	Standard Stream:
		1. Standard Input (STDIN) 0
		2. Standard Output (STDOUT) 1
		3. Standard Error (STDERR) 2

ls -l ~		==> standard Input - result of this command is standard output

--Redirection
ls -l ~ > outputfile	==> overwrite
ls -l ~ >> outputfile	==> append
cat outputfile
echo $(date) > datefile
cat datefile
ls /err
ls /err 2> errorfile 	==> 1> redirection for standard output 
			==> 2> redirection for standard error 
cat errorfile

cat /etc/shadow
cat /etc/shadow /etc/hosts	
cat /etc/shadow /etc/hosts	==> outfile
cat /etc/shadow /etc/hosts 1> success 2> error	
cat error
cat success

cat < error	==> standard input

--pipes
cat /etc/hosts
grep ff00 /etc/hosts
grep -n ff00 /etc/hosts		==> line number
grep -r Port /etc/		==> recursively
man grep
grep -cr Port /etc/
grep -c localhost /etc/hosts

cat /var/log/syslog
head /var/log/syslog
head -n 5 /var/log/syslog
tail /var/log/syslog
tail -n 5 /var/log/syslog
wc /etc/hosts
wc -l /etc/hosts
wc -w /etc/hosts
wc -c /etc/hosts

head -n 50 /var/log/syslog
head -n 50 /var/log/syslog | grep Inserted
head -n 50 /var/log/syslog | wc -l
head -n 50 /var/log/syslog | wc -w
head -n 50 /var/log/syslog | wc -c
head -n 50 /var/log/syslog | grep Inserted | wc -l
int01=$(head -n 50 /var/log/syslog | grep Inserted | wc -l)
echo $int01

echo "This iss a test 123 !" | tr -d 's'		==> -d delete
echo "This iss a test 123 !" | tr [i] [I]
echo "This iss a test 123 !" | tr -s 's'		==> squeeze
echo "This iss a test 123 !" | tr [a-z] [A-Z]
echo "This iss a test 123 !" | tr -d [:digit:]
echo "This iss a test 123 !" | tr [:digit:] 'z'
cat /etc/hosts | tr [:lower:] [:upper:]

   
man cut
echo "This is a string of bytes" | cut -c 1		==> first char
echo "This is a string of bytes" | cut -b 1		==> first byte
echo "This is a string of bytes" | cut -c 2,20
echo "This is a string of bytes" | cut -c 6-15
echo "This is a string of bytes" | cut -c 6-15,20
echo "This is a string of bytes" | cut -f 1		==> first field
echo "This is a string of bytes" | cut -f 1 -d " " 	==> -d delimiter

cat /etc/passwd
cat /etc/passwd | cut -f 1 -d ":"
cat /etc/passwd | cut -f 1,6 -d ":"

-------------------------- 3:50 -----------------------------
Users (superuser (root) ID=0, system user ID=[1:999], Normal user ID=[1000:])

ls /home
cat /etc/passwd
cat /etc/passwd | grep ununtu
cat /etc/passwd | grep root
cat /etc/shadow				==> permission denied
su - root == su
su - 
cat /etc/sudoers

until -- 4:18 --
...
-------------------------- 4:40 -----------------------------
file management

cd /var/log
ls -l
ls -lh
ls -lhd
ls -R
sudo ls -R
sudo tree
	
-------------------------- 9:20 Shell Script -----------------------------
nano fScript.sh
	ls
	date
	whoami
	echo "Hello Script"
cat fScript.sh
ls -l fScript.sh
chmod u+x fScript.sh	==> u for user, g for group, a for all
chmod +x fScript.sh
sh fScript.sh	or	bash fScript.sh   or  ./fScript.sh 
fScript.sh	==> error command not found 
echo $PATH
PATH=.:$PATH	==> add current path to $PATH variable
echo $PATH
fScript.sh

nano fScript.sh
	#!/bin/bash
	ls
	date
	whoami
	echo "Hello Script"
./fScript.sh

nano fScript.sh
	#!/usr/bin/python3
	
	print("Hello Python Shell Script")
./fScript.sh

nano fScript.sh
	#!/bin/env python3
	
	print("Hello Python Shell Script")
./fScript.sh
	
nano fScript.sh
	#!/bin/bash
	
	echo "Hello Shell Script"
./fScript.sh

echo "Hello" ; ls
echo "Hello" && echo "All"
echo "Hello" || echo "All"
false || echo "All"







































































	








	
